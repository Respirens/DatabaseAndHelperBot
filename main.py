import json
import os.path
from io import BytesIO

import requests
from peewee import DoesNotExist
from telebot import TeleBot
from telebot.types import Message, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardRemove

from models import Product

DEFAULT_CONFIG = {
    "bot_token": "change_this_bot_token",
    "password": "change_this_password",
    "admin_password": "change_this_admin_password"
}

LOCKED_CONFIG_PARAMS = [
    "bot_token"
]

MAIN_MENU = ReplyKeyboardMarkup(resize_keyboard=True)
MAIN_MENU.row("üìÅ –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä—ñ–≤", "üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç—ñ–≤")


def generate_post(product_name):
    template = "ü§ç {}\n\n" \
               "‚ñ´Ô∏è–°—Ä—ñ–±–ª–æ 925 –ø—Ä–æ–±–∏\n" \
               "‚ñ´Ô∏è–ó–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—é —Ä–æ–∑–º—ñ—Ä—ñ–≤ –≤ –¥—ñ—Ä–µ–∫—Ç\n" \
               "‚ñ´Ô∏è–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –¢–µ—Ä–Ω–æ–ø–æ–ª—é \n\n" \
               "üí∏ –¶—ñ–Ω–∞ –≤ –¥—ñ—Ä–µ–∫—Ç\n\n" \
               "#pandora"
    return template.format(product_name)


def generate_iterator_keyboard(product_id):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"show {product_id - 1}"),
        InlineKeyboardButton("‚ùå", callback_data=f"close"),
        InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"show {product_id + 1}")
    )
    return markup


def main():
    Product.create_table()

    if os.path.exists("config.json"):
        with open("config.json") as config_file:
            config = json.load(config_file)
    else:
        with open("config.json", "w") as config_file:
            json.dump(DEFAULT_CONFIG, config_file, indent=2)
        print("Config file does not exist, default config will be created")
        print("Set the bot token and passwords in the config, then run the bot")
        exit(0)

    authorized_users = []
    authorized_admins = []

    bot = TeleBot(config["bot_token"], parse_mode="HTML")

    @bot.message_handler(commands=["start"], chat_types=["private"])
    def _start(message: Message):
        if message.from_user.id not in authorized_users:
            bot.send_message(message.chat.id, "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ")
            return
        bot.send_message(message.chat.id, f"–í—ñ—Ç–∞—é, {message.from_user.full_name}", reply_markup=MAIN_MENU)

    @bot.message_handler(commands=["set"], chat_types=["private"], func=lambda msg: msg.from_user.id in authorized_admins)
    def _set(message: Message):
        query = message.text.split(" ")
        if len(query) != 3:
            bot.send_message(message.chat.id, "‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å—É")
            return
        if query[1] not in config:
            bot.send_message(message.chat.id, f"‚ùå –ü–∞—Ä–∞–º–µ—Ç—Ä {query[1]} –Ω–µ —ñ—Å–Ω—É—î")
            return
        if query[1] in LOCKED_CONFIG_PARAMS:
            bot.send_message(message.chat.id, f"‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä {query[1]}")
            return
        config[query[1]] = query[2]
        bot.send_message(message.chat.id, f"‚úÖ {query[1]}={query[2]}")

    @bot.message_handler(commands=["saveconfig"], chat_types=["private"], func=lambda msg: msg.from_user.id in authorized_admins)
    def _save_config(message: Message):
        with open("config.json", "w") as _config_file:
            json.dump(config, _config_file, indent=2)
        bot.send_message(message.chat.id, f"‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    @bot.message_handler(content_types=["text"], chat_types=["private"], func=lambda msg: msg.text == "üìÅ –ë–∞–∑–∞ —Ç–æ–≤–∞—Ä—ñ–≤")
    def _products_database(message: Message):
        if message.from_user.id not in authorized_users:
            bot.send_message(message.chat.id, "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ")
            return
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton("üìÇ –í—ñ–¥–∫—Ä–∏—Ç–∏ –±–∞–∑—É", callback_data="create"))
        database_length = Product.select().count()
        bot.send_message(message.chat.id, f"‚ñ´Ô∏è –¢–æ–≤–∞—Ä—ñ–≤ –≤ –±–∞–∑—ñ: {database_length}", reply_markup=markup)

    @bot.message_handler(content_types=["text"], chat_types=["private"], func=lambda msg: msg.text == "üìù –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ø–æ—Å—Ç—ñ–≤")
    def _post_generator_tip(message: Message):
        if message.from_user.id not in authorized_users:
            bot.send_message(message.chat.id, "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ")
            return
        bot.send_message(message.chat.id, "‚ùï –©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –Ω–∞–∑–≤—É —Ç–æ–≤–∞—Ä—É")

    @bot.message_handler(content_types=["text"], chat_types=["private"],
                         func=lambda msg: msg.text == config["password"])
    def _auth(message: Message):
        if message.from_user.id not in authorized_users:
            authorized_users.append(message.from_user.id)
            bot.send_message(message.chat.id, "‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è", reply_markup=MAIN_MENU)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ", reply_markup=MAIN_MENU)

    @bot.message_handler(content_types=["text"], chat_types=["private"],
                         func=lambda msg: msg.text == config["admin_password"])
    def _admin_auth(message: Message):
        if message.from_user.id not in authorized_admins:
            authorized_admins.append(message.from_user.id)
            bot.send_message(message.chat.id, "‚úÖ –£—Å–ø—ñ—à–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=MAIN_MENU)
        else:
            bot.send_message(message.chat.id, "‚ùå –í–∏ –≤–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä", reply_markup=MAIN_MENU)

    @bot.message_handler(content_types=["text"], chat_types=["private"])
    def _post_generator(message: Message):
        if message.from_user.id not in authorized_users:
            bot.send_message(message.chat.id, "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ")
            return
        bot.send_message(message.chat.id, generate_post(message.text), reply_markup=MAIN_MENU)

    @bot.callback_query_handler(func=lambda call: True)
    def _callback_handler(call: CallbackQuery):
        if call.from_user.id not in authorized_users:
            bot.send_message(call.message.chat.id, "‚ùå –í–∏ –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ñ")
            bot.answer_callback_query(call.id)
            return
        query = call.data.split(" ")
        if query[0] == "create":
            try:
                product = Product.get(Product.id == 1)
                markup = generate_iterator_keyboard(product.id)
                image = BytesIO(requests.get(product.image).content)
                image.seek(0)
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_message(call.message.chat.id, "‚ùï –í–∏ –≤—ñ–¥–∫—Ä–∏–ª–∏ –±–∞–∑—É —Ç–æ–≤–∞—Ä—ñ–≤", reply_markup=ReplyKeyboardRemove())
                bot.send_photo(call.message.chat.id, image,
                               caption=f"<b>ID #{product.id}</b>\n{product.name}\n–¶—ñ–Ω–∞: {product.price} –≥—Ä–Ω",
                               reply_markup=markup)
                bot.answer_callback_query(call.id)
            except DoesNotExist:
                bot.answer_callback_query(call.id, "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞", show_alert=True)
        elif query[0] == "show":
            try:
                product = Product.get(Product.id == int(query[1]))
                markup = generate_iterator_keyboard(product.id)
                image = BytesIO(requests.get(product.image).content)
                image.seek(0)
                bot.delete_message(call.message.chat.id, call.message.id)
                bot.send_photo(call.message.chat.id, image,
                               caption=f"<b>ID #{product.id}</b>\n{product.name}\n–¶—ñ–Ω–∞: {product.price} –≥—Ä–Ω",
                               reply_markup=markup)
                bot.answer_callback_query(call.id)
            except DoesNotExist:
                bot.answer_callback_query(call.id, "‚ùå –¢–æ–≤–∞—Ä –∑ —Ç–∞–∫–∏–º ID –≤—ñ–¥—Å—É—Ç–Ω—ñ–π", show_alert=True)
        elif query[0] == "close":
            bot.delete_message(call.message.chat.id, call.message.id)
            bot.send_message(call.message.chat.id, "‚ùï –í–∏ –∑–∞–∫—Ä–∏–ª–∏ –±–∞–∑—É —Ç–æ–≤–∞—Ä—ñ–≤", reply_markup=MAIN_MENU)
            bot.answer_callback_query(call.id)

    bot.polling()


if __name__ == "__main__":
    main()
